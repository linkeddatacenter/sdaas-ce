if [[ ! -z ${__module_core+x} ]]; then return ; else __module_core=1 ; fi
# Copyright (C) 2019-2024 LinkedData.Center - All Rights Reserved


################################################################################
## Following constant MUST be defined (e.g. in Dockerfile)
################################################################################
#
#SDAAS_INSTALL_DIR
#SDAAS_VERSION
#SDAAS_REFERENCE_DOC
#SDAAS_ETC
#SDAAS_APPLICATION_ID


################################################################################
## Configuration variables' default values
################################################################################
STORE=${STORE:-"http://kb:8080/sdaas/sparql"}
STORE_TYPE=${STORE_TYPE:-w3c}

SD_LOG_PRIORITY=${SD_LOG_PRIORITY:-5}
SD_ABORT_ON_FAIL=${SD_ABORT_ON_FAIL:-false}
SD_DEFAULT_CONTEXT=${SD_DEFAULT_CONTEXT:-"sid=STORE"}

# WARNING: changing this variable breaks the license agreement
SDAAS_SIGNATURE=${SDAAS_SIGNATURE:-"SDaaS $SDAAS_APPLICATION_ID $SDAAS_VERSION"}


################################################################################
## Core functions definition
################################################################################


sd_log() {
	# parse and validate inputs
	local priority=5 size=1024 file=""
    local OPTIND opt; while getopts ":f:p:S:" opt; do
        case "${opt}" in
            f) file="$(readlink -f "${OPTARG}")" ;;
            p) priority="${OPTARG}" ;;
            S) 
				if [[ $(( OPTARG )) -gt 0 ]]; then 
					size=$OPTARG;
				fi
                ;;
			*) sd_log -p ERROR "Invalid option: -$OPTARG ." ; return 1 ;;
        esac
    done; shift $((OPTIND-1))
	local ARG_MESSAGE="$1"
	ARG_MESSAGE="${ARG_MESSAGE:0:$size}" 

	# normalize priority level
	case "${priority^^}" in
		CRITICAL | 2) priority=2 ;;
		ERROR | 3) priority=3 ;;
		WARNING | 4) priority=4 ;;
		NOTICE | 5) priority=5 ;;
		INFORMATIONAL | 6) priority=6 ;;
		DEBUG | 7) priority=7 ;;
		* ) 
		    ARG_MESSAGE="invalid log priority $priority"
			priority=3
			;;
	esac
	
	# normalize priority level mnemonic
	local mnemonic
	case "${priority}" in
		2) mnemonic=CRITICAL ;;
		3) mnemonic=ERROR ;;
		4) mnemonic=WARNING ;;
		5) mnemonic=NOTICE ;;
		6) mnemonic=INFORMATIONAL ;;
		7) mnemonic=DEBUG ;;
		* ) mnemonic="$priority"
			;;
	esac

	# format and print log ARG_MESSAGE
	if [[ "$priority" -le "$SD_LOG_PRIORITY" ]]; then 
		echo "[$mnemonic] [sdaas-$$ ${FUNCNAME[1]}] "$ARG_MESSAGE"" >&2
		if [[ -r "$file" ]]; then
			local file_size=$(stat -c %s "$file")
			if [[ "$file_size" -gt 1024 ]]; then
				head -c 1024 "$file" >&2
				echo "...see more info at $file (size=$file_size bytes)" >&2
			else
				cat "$file" >&2
			fi
		fi
	fi
}


sd_validate() {
	local var="$1" regexp="$2"
    if ! [[ "${!var}" =~ $regexp ]]; then
		sd_log -p ERROR "${FUNCNAME[2]} parameter $var does not match '$regexp'"
		return 1
	fi
}


sd_abort() {
	sd_log -p CRITICAL "***** CRITICAL ERROR DETECTED ($1) EXITING"
	exit 2
}


sd_error() {
	local error_message="${1:-"return error"}" return_val="${2:-1}"
	sd_log -p ERROR "$error_message ($return_val)"
	return $return_val
}

sd_return_first_non_zero() {
	for element in "$@"; do
		if [[ $element -ne 0 ]]; then
			return $element
		fi
	done
}

sd_include() {	
	local forceFlag=0
	if [[ "$1" == "-f" ]]; then
		forceFlag=1
		shift
	fi
	local module="$1"
	if [[ "$forceFlag" -eq 1 ]]; then
		unset "__module_$1"
		sd_log "forced reloading of module $module"
	fi

	# test if the module was already included
	if eval "[ ! -z \${__module_${module}+x} ]" ; then return 0	 ; fi 

	if [[ -e "$HOME/modules/$module" ]]; then
		# try local defined module (override default installation)
		source "$HOME/modules/$module" "$@" 
	elif [[ -e "$SDAAS_INSTALL_DIR/$module" ]]; then
		source "$SDAAS_INSTALL_DIR/$module" "$@" 
	else 
		sd_log -p ERROR "unknow module $module"
		return 1
	fi
}


sd_curl() {
	# sd_log -p DEBUG "executing sd_curl -L -A '$SDAAS_SIGNATURE' --retry 3 --retry-delay 3 --retry-max-time 30 --retry-connrefused --compressed $@"
	curl -L -A "$SDAAS_SIGNATURE" --retry 3 --retry-delay 3 --retry-max-time 30 --retry-connrefused --compressed "$@"
}


sd_curl_rdf() {
	sd_curl -s -f -H "Accept: application/rdf+xml, text/turtle;q=0.9, application/n-triples;q=0.8, */*;q=0.5" "$@"
}


sd_curl_sparql() {
	sd_curl -s -f -H "Accept: application/sparql-query, application/sparql-update;q=0.9, text/plain;q=0.5" "$@"
}


sd_cat() {
	cat "$@" 2> /dev/null
}


sd_rapper() {
	# sd_log -p DEBUG "executing rapper -wq $@"
	rapper -wq \
		-f 'xmlns:rdfs="http://www.w3.org/2000/01/rdf-schema#"' \
		-f 'xmlns:owl="http://www.w3.org/2002/07/owl#"' \
		-f 'xmlns:foaf="http://xmlns.com/foaf/0.1/"' \
		-f 'xmlns:dc="http://purl.org/dc/elements/1.1/"' \
		-f 'xmlns:dct="http://purl.org/dc/terms/"' \
		-f 'xmlns:dqv="http://www.w3.org/ns/dqv#"' \
		-f 'xmlns:prov="http://www.w3.org/ns/prov#"' \
		-f 'xmlns:sd="http://www.w3.org/ns/sparql-service-description#"' \
		-f 'xmlns:void="http://rdfs.org/ns/void#"' \
		-f 'xmlns:xsd="http://www.w3.org/2001/XMLSchema#"' \
		-f 'xmlns:kees="http://linkeddata.center/kees/v1#"' \
		-f 'xmlns:sdaas="http://linkeddata.center/sdaas/reference/v4#"' \
		"$@"
}

sd_url_encode() {
	echo -n "$1" | jq -s -R -r @uri
	sd_return_first_non_zero "${PIPESTATUS[@]}"
}


sd() {
	local abort_on_fail=${SD_ABORT_ON_FAIL:-false} help=false
	local OPTIND opt; while getopts ":hA" opt; do 
        case "${opt}" in
			h) help=true ;;
			A) abort_on_fail=true ;;
			*) 
				sd_log -p ERROR "Invalid option: -$OPTARG . Usage: sd [-h] [-A] MODULE FUNCTION" 
				return 1 
				;;
        esac
    done; shift $((OPTIND-1))	

	local module="$1"
	local function_name="$2"
	sd_validate module "^[a-z][a-z0-9-]+$" || return 1
	sd_validate function_name "^[a-z][a-z0-9-]+$"  || return 2
	shift 2

	if [[ "$help" == "true" ]] ; then
		# print the URL of the manual
		echo "$SDAAS_REFERENCE_DOC/reference/sd_${module}_${function_name}"
		return 0
	fi

	# load module
	sd_include "$module" || return 3

	## test module signature
	local module_signature="__module_${module}"
	[[  "${!module_signature}" -eq 1 ]] || sd_abort "Invalid signature for module $module"

	# build and execute a command
	"sd_${module}_${function_name}" "$@"
	local status="$?"
	if $abort_on_fail && [[ $status -ne 0 ]]; then
		sd_abort "exit=$status, sd_${module}_${function_name}"
	fi
	return $status
}


sd_uuid() { 
	local prefix="${1:-"urn:uuid:"}"
	echo -n "$prefix"
	cat /proc/sys/kernel/random/uuid
}



################################################################################
## Ensure mandatory variables are well-defined
################################################################################
[[ -d "$SDAAS_INSTALL_DIR" && -r "$SDAAS_INSTALL_DIR/core" ]] || sd_abort "Invalid SDAAS_INSTALL_DIR directory ($SDAAS_INSTALL_DIR)"
[[ -n "$SDAAS_VERSION" ]] || sd_abort "No semver in SDAAS_VERSION ($SDAAS_VERSION)"
[[ "$SDAAS_REFERENCE_DOC" =~  ^https?:// ]] || sd_abort "Invalid SDAAS_REFERENCE_DOC URL ($SDAAS_REFERENCE_DOC)"
[[ -d "$SDAAS_ETC" ]] ||  sd_abort "Invalid SDAAS_ETC directory ($SDAAS_ETC)"
[[ -n "$SDAAS_APPLICATION_ID" ]] ||  sd_abort "Empty SDAAS_APPLICATION_ID not allowed"

###########################
# Module initialization
##########################
AGENT_ID="$(sd_uuid)"
if [[ "$1" != "NO_SPLASH" ]]; then
	( export STORE STORE_TYPE AGENT_ID; cat "$SDAAS_ETC/splash.txt" | envsubst)
fi

# Set the prompt in interactive mode
PS1="sdaas > "
