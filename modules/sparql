if [[ ! -z ${__module_sparql+x} ]]; then return ; else __module_sparql=1 ; fi
# Copyright (C) 2019-2023 LinkedData.Center - All Rights Reserved

sd_include driver

################################################################################
## Core commands definition
################################################################################

sd_sparql_update() {
    # parse and validate inputs
    local sid="STORE"
    eval "declare $SD_DEFAULT_CONTEXT"
    local OPTIND opt; while getopts ":s:D:" opt; do
        case "${opt}" in
            s) sid="$OPTARG" ;;
            D) eval "declare $OPTARG" ;;
			*) sd_log -p ERROR "Invalid option: -$OPTARG ." ; return 1 ;;
        esac
    done; 

    # call driver function
    sd_driver_update "$sid" 
}



sd_sparql_query() {
    # parse and validate inputs
    local sid="STORE" output_format="xml"
    eval "declare $SD_DEFAULT_CONTEXT"
    local OPTIND opt; while getopts ":o:s:D:" opt; do
        case "${opt}" in
            o) output_format="${OPTARG}" ;;
            s) sid="${OPTARG}" ;;
            D) eval "declare $OPTARG" ;;
			*) sd_log -p ERROR "Invalid option: -$OPTARG ." ; return 1 ;;
        esac
    done; shift $((OPTIND-1))

    # Validate output_format
    local media_type
	case "${output_format}" in
		csv*) media_type="text/csv" ;;
        tsl) media_type="text/tab-separated-values" ;;
        json) media_type="application/sparql-results+json" ;;
        xml|boolean|test) media_type="application/sparql-results+xml" ;;
        ntriples) media_type="application/n-triples" ;;
        turtle) media_type="text/turtle" ;;
        rdfxml) media_type="application/rdf+xml" ;;
        *) 
            sd_log -p ERROR "format $output_format not supported"
            return 1
            ;;
	esac
   
    # call driver function and post-processing results
	case "$output_format" in
		csv-h)   sd_driver_query "$sid" "$media_type" | csvtool drop 1 - ;;
		csv-1)   sd_driver_query "$sid" "$media_type" | csvtool head 2 - | csvtool drop 1 -;;
		csv-f1)  sd_driver_query "$sid" "$media_type" | csvtool head 2 - | csvtool drop 1 - | csvtool format '%(1)\n' - ;;
		boolean) sd_driver_query "$sid" "$media_type" | xmllint --xpath "//*[local-name()='boolean']/text()" - 2>/dev/null;;
        test)    sd_driver_query "$sid" "$media_type" | \
            xmllint --xpath "((count(//*[local-name()='results']/*) + count(//*[local-name()='boolean'])) = 0) \
                or //*[local-name()='boolean'][text()='true']" - 2>/dev/null \
            |  grep -q "true"
            ;;
		*) sd_driver_query "$sid" "$media_type" ;;
	esac
	sd_return_first_non_zero "${PIPESTATUS[@]}"
}


sd_sparql_graph() {
    # parse and validate inputs
    local sid="STORE" accrual_method="POST" graph="$(sd_uuid)"
    eval "declare $SD_DEFAULT_CONTEXT"
    local OPTIND opt; while getopts ":a:s:D:" opt; do
        case "${opt}" in
            a) accrual_method="${OPTARG}" ;;
            s) sid="${OPTARG}" ;;
            D) eval "declare $OPTARG" ;;
			*) sd_log -p ERROR "Invalid option: -$OPTARG ." ; return 1 ;;
        esac
    done; shift $((OPTIND-1))
    if [[ -n "$1" ]]; then graph="$1"; fi

    sd_driver_load "$sid" "$accrual_method" "$graph" 
}


################################################################################
## Commands shortcuts
################################################################################
sd_sparql_rule() { sd sparql query -o ntriples "$@"; }
sd_sparql_test() { sd sparql query -o test "$@"; }
sd_sparql_list() { sd sparql query -o 'csv-h' "$@"; }
