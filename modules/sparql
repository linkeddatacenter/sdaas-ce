if [[ ! -z ${__module_sparql+x} ]]; then return ; else __module_sparql=1 ; fi
# Copyright (C) 2019-2023 LinkedData.Center - All Rights Reserved

sd_include driver

################################################################################
## Core commands definition
################################################################################

sd_sparql_update() {
    # parse and validate inputs
    local OPT_SID="STORE"
    local OPTIND opt; while getopts ":s:" opt; do
        case "${opt}" in
            s) OPT_SID="${OPTARG}" ;;
			*) sd_log -p ERROR "Invalid option: -$OPTARG ." ; return 1 ;;
        esac
    done; shift $((OPTIND-1))
    local ARG_UPDATE_COMMAND="${1:-"-"}"
    
    # call driver function
    sd_driver_update "$OPT_SID" "$ARG_UPDATE_COMMAND"
}



sd_sparql_query() {
    # parse and validate inputs
    local OPT_SID="STORE"
    local OPT_OUTPUT_FORMAT="xml"
    local OPTIND opt; while getopts ":o:s:" opt; do
        case "${opt}" in
            o) OPT_OUTPUT_FORMAT="${OPTARG}" ;;
            s) OPT_SID="${OPTARG}" ;;
			*) sd_log -p ERROR "Invalid option: -$OPTARG ." ; return 1 ;;
        esac
    done; shift $((OPTIND-1))
    local ARG_QUERY_COMMAND="${1:-"-"}"

    # Validate OPT_OUTPUT_FORMAT
    local media_type
	case "${OPT_OUTPUT_FORMAT}" in
		csv*) media_type="text/csv" ;;
        tsl) media_type="text/tab-separated-values" ;;
        json) media_type="application/sparql-results+json" ;;
        xml|boolean|test) media_type="application/sparql-results+xml" ;;
        ntriples) media_type="application/n-triples" ;;
        turtle) media_type="text/turtle" ;;
        rdfxml) media_type="application/rdf+xml" ;;
        *) 
            sd_log -p ERROR "format $OPT_OUTPUT_FORMAT not supported"
            return 1
            ;;
	esac
   
    # call driver function and post-processing results
	case "$OPT_OUTPUT_FORMAT" in
		csv-h)   sd_driver_query "$OPT_SID" "$media_type" "$ARG_QUERY_COMMAND" | csvtool drop 1 - ;;
		csv-1)   sd_driver_query "$OPT_SID" "$media_type" "$ARG_QUERY_COMMAND" | csvtool head 2 - | csvtool drop 1 -;;
		csv-f1)  sd_driver_query "$OPT_SID" "$media_type" "$ARG_QUERY_COMMAND" | csvtool head 2 - | csvtool drop 1 - | csvtool format '%(1)\n' - ;;
		boolean) sd_driver_query "$OPT_SID" "$media_type" "$ARG_QUERY_COMMAND" | xmllint --xpath "//*[local-name()='boolean']/text()" - 2>/dev/null;;
        test)    sd_driver_query "$OPT_SID" "$media_type" "$ARG_QUERY_COMMAND" | \
            xmllint --xpath "((count(//*[local-name()='results']/*) + count(//*[local-name()='boolean'])) = 0) \
                or //*[local-name()='boolean'][text()='true']" - 2>/dev/null \
            |  grep -q "true"
            ;;
		*) sd_driver_query "$OPT_SID" "$media_type" "$ARG_QUERY_COMMAND" ;;
	esac
}


sd_sparql_graph() {
    # parse and validate inputs
    local OPT_SID="STORE"
    local OPT_ACCRUAL_METHOD="POST"
    local OPTIND opt; while getopts ":a:s:" opt; do
        case "${opt}" in
            a) OPT_ACCRUAL_METHOD="${OPTARG}" ;;
            s) OPT_SID="${OPTARG}" ;;
			*) sd_log -p ERROR "Invalid option: -$OPTARG ." ; return 1 ;;
        esac
    done; shift $((OPTIND-1))
    local ARG_GRAPH_URI="${1:-$(sd_uuid)}"

    "sd_driver_load" "$OPT_SID" "$OPT_ACCRUAL_METHOD" "$ARG_GRAPH_URI" 
}


