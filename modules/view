if [[ ! -z ${__module_view+x} ]]; then return ; else __module_view=1 ; fi
# Copyright (C) 2019-2023 LinkedData.Center - All Rights Reserved


################################################################################
## Core commands definition
################################################################################

sd_view_config() {
	if [[ "$#" -ne 0 ]]; then
	 	sd_log -p ERROR "extra parameters found"
		return 1
	fi
	_view_config_compgen() {
		for var in $(compgen -v "$1"); do
			printf "$var=\"${!var}\"\n"
		done
	}

	_view_config_compgen SDAAS_
	_view_config_compgen SD_
	_view_config_compgen STORE
}


sd_view_modules() {
	if [[ "$#" -ne 0 ]]; then
	 	sd_log -p ERROR "extra parameters found"
		return 1
	fi
	local moduleName moduleVar status

	for modulePath in $(ls "$SDAAS_INSTALL_DIR"); do
		moduleName="$(basename "$modulePath")"
		moduleVar=$(printf "__module_%s" "$moduleName")
		if [[ $(eval echo "\${$moduleVar}") ]]; then	
			status=" --cached"
		else 
			status=""
		fi	
		printf "%s%s\n" "$(basename "$moduleName")" "$status" 
	done
}



sd_view_module() {
	if [[ "$#" -ne 1 ]]; then
	 	sd_log -p ERROR "a module is required"
		return 1
	fi
	local MODULE=${1}

	if [[ -z "$MODULE" ]]; then
		sd_log -p ERROR "No module name specified (try 'sd view modules')"
		return 1
	fi

	for command in $(grep 'sd_.*() {$' "$SDAAS_INSTALL_DIR/$MODULE" | awk '{print $1}' | sed 's/()//'); do
		printf "%s()\n" "$command" 
	done
}



sd_view_version() {
	echo "$SDAAS_VERSION"
}


sd_view_agent() {
	# parse and validate inputs
   	local output_format="ntriples"
    local OPTIND opt; while getopts ":o:" opt; do
        case "${opt}" in
            o) output_format="${OPTARG}" ;;
			*) sd_log -p ERROR "Invalid option: -$OPTARG ." ; return 1 ;;
        esac
    done; shift $((OPTIND-1))
	sd_validate output_format "^(rdfxml|ntriples|turtle)$" || return 1


	cat <<-EOF |  sd_rapper -i turtle -o "$output_format"  - "$AGENT_ID"
	@prefix foaf: <http://xmlns.com/foaf/0.1/> .
	@prefix prov: <http://www.w3.org/ns/prov#> .
	@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
	<$AGENT_ID> a prov:SoftwareAgent, prov:Agent ;
		rdfs:label "SDaaS Agent" ;
		foaf:name "$SDAAS_SIGNATURE" .
	EOF
	sd_return_first_non_zero "${PIPESTATUS[@]}"
}



sd_view_ontology() {
	# parse and validate inputs
   	local output_format="ntriples"
    local OPTIND opt; while getopts ":o:" opt; do
        case "${opt}" in
            o) output_format="${OPTARG}" ;;
			*) sd_log -p ERROR "Invalid option: -$OPTARG ." ; return 1 ;;
        esac
    done; shift $((OPTIND-1))
	sd_validate output_format "^(rdfxml|ntriples|turtle)$" || return 1

	function get_triples {
		local files_array="$(find $SDAAS_ETC -type f \( -name "*.rdf" -o -name "*.nt" -o -name "*.ttl" \))"
		for file in "${files_array[@]}"; do
			sd_rapper -g -I "urn:sdaas:tbox" -o ntriples "$file" || sd_abort "Internal error, invalid tbox $file"
		done
		sd_view_agent
	}

	get_triples | sd_rapper -i ntriples -o "$output_format"  - "urn:sdaas:tbox"
}