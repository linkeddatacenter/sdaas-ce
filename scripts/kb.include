# Copyright (C) 2019-2020 LinkedData.Center - All Rights Reserved
# Permission to copy and modify is granted under the MIT license
if [ ! -z ${__module_kb+x} ]; then return ; else __module_kb=1 ; fi

SD_INCLUDE bg_reasoning


SD_SPARQL_ENDPOINT=${SD_SPARQL_ENDPOINT:-"http://localhost:8080/sdaas/sparql"}
SD_UPLOAD_DIR=${SD_UPLOAD_DIR:-"/tmp/upload"}



##########################################################################
### WARNING: for SD_ENABLE_LEXICAL_REASONING and  SD_WARMUP
### SD_SPARQL_ENDPOINT must point to a sdaas rdfstore (local or remote)
### if remote, SD_UPLOAD_DIR must be shared
##########################################################################


##
# @description a test that the engine is ok and some init actions (if required) use
##
function SD_WARMUP {
	SD_WARMUP_REASONING_ENGINE "$(dirname "$SD_SPARQL_ENDPOINT")"
}



##
# @arg $1 mime type for accepted result (i.e. text/csv or text/turtle) or some shortcuts:
#      "csv" a shortcut for text/csv
#      "csv-h" text/csv without  headers
# 	   "csv-1" return just first line (removing headers) in csv
# 	   "csv-f1" return just first field in first line (removing headers) in csv
#	   "bool" return true or false if result contains <value>true</value>
#	   "xml" a shortcut for application/sparql-results+xml
# @arg $2 a string with a valid sparql query statement (with extension) or a filename prefixed by the  @ character
##
function SD_SPARQL_QUERY {
	SD_REASONER_QUERY "$SD_SPARQL_ENDPOINT" "$1" "$2"
}


##
# @arg $1 a sparql update string or @filename
##
function SD_SPARQL_UPDATE {
	SD_REASONER_UPDATE "$SD_SPARQL_ENDPOINT" "$1"
}


##
# @arg $1 a graph name if "default" file is added to default graph
# @arg $2 an input file
# @arg $3 the input file format  Format can be: guess(default), 'turtle', 'ntriples', 'rdfxml'
##
function SD_LOAD_RDF_FILE {
	SD_REASONER_LOAD "$SD_SPARQL_ENDPOINT" "$1" "$2" "$3"  "$SD_UPLOAD_DIR"
}

