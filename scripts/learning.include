# Copyright (C) 2019 LinkedData.Center - All Rights Reserved
# Permission to copy and modify is granted under the MIT license
if [ ! -z ${__module_learning+x} ]; then return ; else __module_learning=1 ; fi

SD_INCLUDE activity
SD_INCLUDE curl_utils

SD_REQUIRES_VAR SD_CACHE
SD_REQUIRES_CMD SD_LOG find realpath tail


# @description
#	downloads web resources into the activity "in" directoty
#	It requires a list of download requests in _SD_SOURCES[@] variable. Download requests must be in the form: <url>[ |<extension> [ | <downloader options> [ | downloader]]] where:
#	. <url> is a file or an url recognized by downloader. file is converted in url as "file://localhost$(realpath "$url")"
#	. <extension> is an extension to be added to the downloaded file, ifi is equal to "auto" it tries to preserve the original extension (if present) or adds ".data"
#	. <downloader options> extra options added to downloader command
#	. <downloader> the commad to be used to download. it must accept <url> end write result on std out
#	  if not specified it uses the command contained in SD_DEFAULT_DOWNLOADER (curl)
#
# @arg $_SD_SOURCES [@] a list of download request
# @arg $SD_ACTIVITY_DIR
# @arg $SD_DEFAULT_DOWNLOADER a default download command (like curl)
# @arg $SD_DEBUG_FILE a file to store debug info
function _SD_EXTRACT {
	_SD_LOG_PROV ":activity prov:wasInfluencedBy :extraction. :extraction a prov:Activity; prov:startedAtTime TIMESTAMP ."

	local downloadRequest
	for downloadRequest in "${_SD_SOURCES[@]}"; do
		##### parse downloadRequest
		local url extension downloaderOpts downloader
		IFS='|' read  url extension downloaderOpts downloader  <<< "$downloadRequest"
		extension=${extension:-auto}
			
		# if $url is a file, force cp instead of the default downloader
	    if [ -z "$downloader" ] ; then
	    	if [ -f "$url" ] ; then 
	    		downloader="cp -f"
		    else
		     	downloader="$SD_DEFAULT_DOWNLOADER"
		    fi
		fi

		# save the extension of the input url
		if [  "$extension" = 'auto' ]; then
			#####  try to preseve extension, if any
			local resourcePath="${url##*/}"
			extension="${resourcePath##*.}"
			if [ "$extension" = "$resourcePath" ]; then extension='data'; fi # i.e. if no extension in url than use .data
			extension=".${extension}"
		fi
		local outPath="in/$(_SD_MK_UID "$url")${extension}"

		SD_DEBUG_INFO "in _SD_EXTRACT downloader='$downloader' url='$url' downloaderOpts='$downloaderOpts' outPath='$outPath'"
		
		if $downloader "$url" "$SD_ACTIVITY_DIR/$outPath" $downloaderOpts ; then
			_SD_ACTIVITY_LOG "downloaded $url"
			_SD_LOG_PROV ":extraction prov:generated <urn:sdaas:cache:${SD_ACTIVITY_ID}:$outPath> ."
		else
			_SD_ACTIVITY_LOG "error downloading $url"
			_SD_LOG_PROV ":extraction prov:invalidated <urn:sdaas:cache:${SD_ACTIVITY_ID}:$outPath> ."
			return 1
		fi
	done
	_SD_LOG_PROV ":extraction prov:endedAtTime TIMESTAMP ."
}


function _SD_TRANSFORMER {
	local preprocessor="$1"
	local inputFile="$2"
	local pipeline="$3"
	local outputPath="$4"
	$preprocessor "$inputFile"| $pipeline 2>> "$SD_DEBUG_FILE" 1> "$outputPath"
}

# @description
#	apply a set of transformation steps to the activity input
#   a transformation has this general format
#	<input> <output> <command> <newExtension> where:
#	 . <transformation processor> a command to exttract data or an alias
#	 . <inputdir/filter> is a input filter for find command relative to activity dir that must exists
#	 . <outputdir> is a directory relative to activity dir. If not existing it is created
#	 . <extension> changes last extension to be applied to all output filename (empty by default). If is equal to 'keep' extension is noth changed
#	 . <pipeline> it is a pipeline that will be applied to all inputs
#   The ouput filenames are generated from input one
#
# @arg $1 a list of transformation
function _SD_TRANSFORM {
	SD_REQUIRES_VAR SD_ACTIVITY_DIR
	
	# If no transformation, just move all files in input queue to the output queueu
	# equivalent to _SD_TRANSFORMATIONS=('|in|out|keep|') but faster
	if [ -z "$_SD_TRANSFORMATIONS" ] ; then
		for file in $(find "$SD_ACTIVITY_DIR/in" -name "*" -type f  -print); do
			mv -f "$file" "$SD_ACTIVITY_DIR"/out/ || SD_FATAL_ERROR "error moving files from in to out in _SD_TRANSFORM"
		done
		return 0
	fi
	
	_SD_LOG_PROV ":activity prov:wasInfluencedBy :transformation. :transformation a prov:Activity; prov:wasInformedBy :extraction; prov:startedAtTime TIMESTAMP ."
	
	local transformationRequest
	for transformationRequest in "${_SD_TRANSFORMATIONS[@]}"; do
		#### parse transformation request
		local preprocessor inputFilter outputDir postprocessor pipeline
		IFS='|' read -r preprocessor inputFilter outputDir postprocessor pipeline <<< "$transformationRequest"
		preprocessor=${preprocessor:-cat}
		inputFilter=${inputFilter:-in}
		outputDir=${outputDir:=out}
		pipeline=${pipeline:-cat}	
		#note: postprocessor can be empty when you want to remove an exension (e.g. in gzip processing)
		
		#### extract input dir and file name filter to be used with find command
		local inputDir="${inputFilter%/*}"
		local fileNameFilter="${inputFilter##*/}"
		if [ "$fileNameFilter" = "$inputFilter" ]; then fileNameFilter='*' ; fi ##no trailing / in input dir
		
		
		#### ensure input and output dir exist
		test -d "$SD_ACTIVITY_DIR/$inputDir" || SD_FATAL_ERROR "_SD_TRANSFORM input dir does not exists"
		test -d "$SD_ACTIVITY_DIR/$outputDir" || mkdir "$SD_ACTIVITY_DIR/$outputDir" || SD_FATAL_ERROR "_SD_TRANSFORM cant create output dir $outputDir"
			
		local inputFile
		for inputFile in $(cd "$SD_ACTIVITY_DIR"; find "$inputDir" -name "$fileNameFilter" -type f  -print | sort); do
			#### generate an output path
			local outputFile
			local outputFileName="$(basename "$inputFile")" 
			if [ "$postprocessor" = "keep" ]; then
				outputFile="$outputDir/${outputFileName}"
			else 
				outputFile="$outputDir/${outputFileName%.*}"	# remove old extension
				outputFile+="${postprocessor}"		# add new estension (if set)
			fi	
			SD_DEBUG_INFO "In _SD_TRANSFORM preprocessor='$preprocessor' inputFile='$SD_ACTIVITY_DIR/$inputFile' pipeline='$pipeline' output='$SD_ACTIVITY_DIR/$outputFile'"
			$preprocessor "$SD_ACTIVITY_DIR/$inputFile" | eval $pipeline 2>> "$SD_DEBUG_FILE" 1> "$SD_ACTIVITY_DIR/$outputFile"
			if [ $? -ne 0 ]; then SD_FATAL_ERROR "_SD_TRANSFORMER cant execute transformation" ; fi
			_SD_LOG_PROV ":transformation prov:used <urn:sdaas:cache:${SD_ACTIVITY_ID}:$inputFile)>; prov:generated <urn:sdaas:cache:${SD_ACTIVITY_ID}:$outputFile> ."
			
		done		
		_SD_ACTIVITY_LOG "transformation pipeline: $inputDir/$fileNameFilter -> $preprocessor -> $pipeline -> $outputDir"	
	done
	
	_SD_LOG_PROV ":transformation prov:endedAtTime TIMESTAMP ."	
}


# @description 
#	implements a named graph ingestion activity maging provenance info
#
# @arg $1 the name the graph to,load
# @arg $2 a source URI or an array of source URIs. If not provided defaults to $1
# @arg $3 an optional transformation or an array transformation
#
#
# @example
# 	#loads https://www.w3.org/ns/prov web resource in graph named <https://www.w3.org/ns/prov> using <https://www.w3.org/ns/prov> as source
#   #same as SD_LEARN https://www.w3.org/ns/prov https://www.w3.org/ns/prov
#   SD_LEARN https://www.w3.org/ns/prov
#
function SD_LEARN {
	SD_REQUIRES_VAR 1
	local g="$1"
	
	########### PARSE ARGS
	case $# in
		1)
			_SD_SOURCES=("$g")
			_SD_TRANSFORMATIONS=''
			;;
		2)		
			if [ ${2:${#2} - 3} = "[@]" ]; then _SD_SOURCES=("${!2}"); else _SD_SOURCES=("$2"); fi
			_SD_TRANSFORMATIONS=''
			;;
		3)	
			if [ ${2:${#2} - 3} = "[@]" ]; then _SD_SOURCES=("${!2}"); else _SD_SOURCES=("$2"); fi
			if [ ${3:${#3} - 3} = "[@]" ]; then _SD_TRANSFORMATIONS=("${!3}"); else _SD_TRANSFORMATIONS=("$3"); fi
			;;
		*)
			SD_FATAL_ERROR "Wrong argument number for SD_LEARN"
			;;
	esac
	
	# start an activity in not yes started
	if [ "$_SD_ACTIVITY_STATUS" != "running" ] ; then
		_SD_START_ACTIVITY "learning of graph <$g>"
	fi
	
	# ETL process
	if _SD_EXTRACT ; then
		_SD_TRANSFORM 
		_SD_COMMIT_ACTIVITY "$g"
	else
		_SD_INVALIDATE_GRAPH "$g"
	 	return 1
	fi
}

