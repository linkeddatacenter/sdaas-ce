if [ ! -z ${__module_agent_rule+x} ]; then return ; else __module_agent_rule=1 ; fi

SD_INCLUDE activity

SD_REQUIRES_CMD SD_EVAL_CONSTRUCTOR SD_SPARQL_UPDATE SD_LEARN envsubst



# Start a ruleset related activity adding some extra metadata
# retrived in the source file
function SD_START_RULESET_ACTIVITY {
	SD_REQUIRES_VAR 1 2 3 
	local ruleName="$1"
	local title="$2"
	local source="$3"
	
	local graphDescription
	local graphTrust
	
	_SD_START_ACTIVITY "calling axiom $title from  ruleset $ruleName"
	_SD_LOG_PROV ":graph a kees:InferenceGraph; dct:title \"$ruleName\"@it ."
	
	graphDescription=$(grep -oP '(?<=##@ )[^"]*' "$source" | head -1)
	if [ ! -z "$graphDescription" ]; then
		_SD_LOG_PROV ":graph dct:description \"$graphDescription\"@it ."
	fi

	graphTrust=$(grep -oP '(?<=#trust=)[0-1]\.\d\d' "$source" | head -1)
	if [ ! -z "$graphTrust" ]; then
			_SD_LOG_PROV "
:axiom_trust a <http://purl.org/eis/vocab/daq#Observation> ;
    <http://purl.org/eis/vocab/daq#computedOn> :graph ; 
    <http://purl.org/eis/vocab/daq#metric> kees:trustGraphMetric;
    <http://purl.org/eis/vocab/daq#value> $graphTrust ;
    <http://purl.org/eis/vocab/daq#isEstimated> true .
"
	fi
}


# Like _SD_COMMIT_ACTIVITY but without dropping the graph
function _SD_COMMIT_REASONING {
	local graphName="$1"
	
	_SD_LOG_PROV "
		:activity prov:endedAtTime TIMESTAMP ; prov:generated :graph .
		:graph sd:name <$graphName>; 
			prov:wasGeneratedBy :activity ;
			dct:created TIMESTAMP ;
			dct:modified TIMESTAMP . 
	"
	SD_LOAD_RDF_FILE "$graphName" "$SD_ACTIVITY_DIR/prov.ttl"
	
	if [ $SD_DEBUG -eq 0 ]; then rm -rf "$SD_ACTIVITY_DIR" ; fi
	_SD_ACTIVITY_STATUS='noop'
}



# $1 must be the grap base name space
# $2 must be the rule directory that contains axioms
# A rule can be:
#  - a sparql query construct directive (if axiomExtension = construct)
#  - a static linked data file (if axiomExtension = ttl)
#  - a sparql query select directive, in this case the query is evaluated and the result
#      passed to a php reasoner whose name is the same of the select but with axiomExtension .php
function SD_EVAL_RULESET {
	SD_REQUIRES_VAR 1 2
	local graphNS="$1"
	local rule="$2"
	
	local axiom
	for axiom in $(ls -v "${rule}"); do	
		local axiomExtension="${axiom##*.}"
		local axiomName="${axiom%.*}"
		local ruleName=$(basename -- "$rule")
		local graphName="${graphNS}${rule}/${axiom}"
			
		case "$axiomExtension" in
			construct)
				SD_START_RULESET_ACTIVITY "$ruleName" "$axiomName" "${rule}/$axiom" 
				SD_EVAL_CONSTRUCTOR "$graphName" "@${rule}/$axiom" 
				;;
			update)
				(
					SD_START_RULESET_ACTIVITY "$ruleName" "$axiomName" "${rule}/$axiom" 
					export rule axiom graphNS axiomName ruleName graphName
					cat "${rule}/$axiom" | envsubst | SD_SPARQL_UPDATE "@-"
					if [ $? -eq 0 ]; then	
						_SD_COMMIT_REASONING "$graphName"	
					else
						_SD_INVALIDATE_GRAPH "$graphName"
						return 1
					fi	
				)
				;;				
			reasoning)
				SD_START_RULESET_ACTIVITY "$ruleName" "$axiomName" "${rule}/$axiom" 
				SD_SPARQL_UPDATE "DROP SILENT GRAPH <$graphName>" ;
				. "${rule}/$axiom"
				if [ $? -eq 0 ]; then	
					_SD_COMMIT_REASONING "$graphName"	
				else
					_SD_INVALIDATE_GRAPH "$graphName"
					return 1
				fi	
				;;			
		esac
	done
}