#!/usr/bin/env bash
# Copyright (C) 2019-2020 LinkedData.Center - All Rights Reserved
# Permission to copy and modify is granted under the MIT license

_SDAAS_DIR="$(dirname "$( realpath "$0" )")"

_SDAAS_VERSION="2"
_SDAAS_AGENT_NAME="Anassimandro"

_SD_MUST_EXIT=0
_SD_REBOOT=0
SD_VERBOSE=${SD_VERBOSE:-1}
SD_DEBUG=${SD_DEBUG:-0}
SD_QUADSTORE=${SD_QUADSTORE:-kb}
SD_NOWARMUP=0

function _SDAAS_FATAL_ERROR {
	>&2 cat <<-EOT
		Smart Data as a Service (SDaaS) platform - '$_SDAAS_AGENT_NAME' edition
		Copyright (C) 2018 http://linkeddata.center/
			
		valid options:
			
		-d, --debug
		   saves extra debug information without deleting cached info on termination
		   
		   This option is equivalent to declare SD_DEBUG=1 environment variable
		
		-f, --file <sdaa script>
		   executes a build script
		
		-k, --graph-engine kb|ekb|blazegraph|neptune
		    defines the backed technology to be used. Supported technologies:
		       kb (default) : use the kb archetype of the sddas reasoner as rdfstore. 
		           Requires a running local instance of blazegraph, forces "pull" policy in a one step (i.e. no chunks support).
		           This is the only option in the sdaas community edition
		       blazegraph: use a remote blazegraph instance (you need setup env variables SD_BG_ENDPOINT and  SD_BG_NAMESPACE)
		       ekb: use a LinkedData.Center GDaaS instance (you need setup env variables SD_KBUSER and SD_KBPASSWORD)
		       neptune: use a aws neptune instance (you need setup SD_NEPTUNE_INSTANCE, only works on same VPN as neptune host)
				
		    N.B. each graph engine may require additional special setup procedures.
		    This option is equivalent to use SD_QUADSTORE environment variable
		
		-a, --accrual-policy pull|push
		    defines the policy used to store RDF statements in the graph engine:
		      .) with "pull" data is published to a shared resurce and
		         then the graph engine is requested to load it.
		         This is fast but it requires a bidirectional channel from sdaas and
		         the graph engine. It is the default.
		      .) with "push" data is pushed by sdaas to the graph db
		    Data is splitted in small chunks. By defauult the chunks size is 100000 triples 
		    for the pull policy and 50000 triples for the push policy.
			
		    This option is equivalent to use SD_ACCRUAL_POLICY environment variable
		    You can personalize the chunks size using SD_LOAD_CHUNK_SIZE environment variable.
			 
		-q, --quiet
		   Do not show progress meter or error messages.
		   
		-u, --urispace
		   use this namespace when creating new URIs. Default urn:sdaas:resource:		
			
		--reboot
		   WARNING!!! erase all knowledge base before executing the rebuild process
		   
		--no-warmup skipp the reasoner warmup (usefull if reasoner in sot needed)
			
		--verbose <verbose_level>
		   -v is equivalent to --verbose 1, --verbose 0 is an alias of -q
			
		--version
		   prints the platform version	
	EOT
	exit 1
}


### Parse command line options
__parsed=$(getopt --options=qvda:k:f:u: --longoptions=quiet,verbose:,debug,reboot,version,file:,graph-engine:,accrual-policy:,urispace:,no-warmup --name "$0" -- "$@")	 || _SDAAS_FATAL_ERROR
eval set -- "$__parsed"
unset __parsed 

while true; do
	case "$1" in
	    -q|--quiet)
	    	SD_VERBOSE=0
            shift
	    	;;
	    -v)
	    	SD_VERBOSE=1
            shift
	    	;;
	    --verbose)
	    	SD_VERBOSE=$2
            shift 2
	    	;;
	    -d|--debug)
	    	SD_DEBUG=1
            shift
	    	;;
	    --reboot)
	    	_SD_REBOOT=1
            shift
	    	;;
	    --version)
	    	echo "Smart Data as a Service Platform version $_SDAAS_VERSION providing the $_SDAAS_AGENT_NAME agent."
            shift
	    	;;
	    -f|--file)
			_SD_PROGRAMFILE="$2"
	    	shift 2
	    	;;
	    -k|--graph-engine)
			SD_QUADSTORE="$2"
	    	shift 2
	    	;;
	    -a|--accrual-policy)
			SD_ACCRUAL_POLICY="$2"
	    	shift 2
	    	;;
	    -u|--urispace)
	    	SD_URISPACE="$2"
	    	shift 2
	    	;;
	    --no-warmup)
	    	SD_NOWARMUP=1
	    	shift
	    	;;
        --)
            shift
            break
        ;;
	    *)
	        _SDAAS_FATAL_ERROR
	    ;;
	esac
done

if [  $_SD_MUST_EXIT -eq 1 ]; then exit; fi

if [ -f "$_SD_PROGRAMFILE" ]; then
	. "$_SDAAS_DIR/platform.include"
	. "$_SD_PROGRAMFILE"
else
	inifile=$(mktemp --tmpdir)
	if [ -f ~/.bashrc ]; then
		cat ~/.bashrc > "$inifile"
	fi
	cat <<-EOT >> "$inifile"
		_SD_REBOOT=${_SD_REBOOT}
		SD_VERBOSE=${SD_VERBOSE}
		SD_DEBUG=${SD_DEBUG}
		SD_QUADSTORE=${SD_QUADSTORE}
		SD_ACCRUAL_POLICY=${SD_ACCRUAL_POLICY}
		SD_URISPACE=${SD_URISPACE}
		SD_NOWARMUP=${SD_NOWARMUP}
		. "$_SDAAS_DIR/platform.include"
		PS1="sdaas > "
	EOT
	bash --init-file $inifile
	rm -f "$inifile"
fi

