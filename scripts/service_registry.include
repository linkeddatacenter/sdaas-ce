# Copyright (C) 2019 LinkedData.Center - All Rights Reserved
# Permission to copy and modify is granted under the MIT license
if [ ! -z ${__module_service_registry+x} ]; then return ; else __module_service_registry=1 ; fi


SD_REQUIRES_VAR SD_CACHE 
SD_REQUIRES_CMD mktemp

_SD_SERVICE_ARCHIVE="${_SD_SERVICE_ARCHIVE:-"$SD_CACHE/registry"}"

# @description register a service
# @arg $1 a service description string
# @arg $2 a service description id ( if not provided a unique name is created ). for testing purpose
function SD_REGISTER_SERVICE {
	local serviceSpecs="$1"
	local serviceId="$2"
	
	SD_DEBUG_INFO  "In SD_REGISTER_SERVICE serviceId=$serviceId"
	
	mkdir -p "$_SD_SERVICE_ARCHIVE" || SD_FATAL_ERROR "Error initializing services registry archive"
	test -r "$_SD_SERVICE_ARCHIVE" || SD_FATAL_ERROR "Registry archive is not writable."
	
	
	local dataFile
	if [ -z "$serviceId" ]; then
		dataFile=$(mktemp --tmpdir="$_SD_SERVICE_ARCHIVE" svc-XXXXXXXXXX)
	else
		dataFile="$_SD_SERVICE_ARCHIVE/$2"
	fi
	echo "$serviceSpecs" > "$dataFile"
	echo $(basename "$dataFile")
}


function SD_FETCH_SERVICE {
	local serviceID="$1"
	
	SD_DEBUG_INFO  "In SD_GET_SERVICE serviceID=$serviceID"
	[  -f "$_SD_SERVICE_ARCHIVE/$serviceID" ] || SD_FATAL_ERROR "Service not found."
	
	cat "$_SD_SERVICE_ARCHIVE/$serviceID"
}


function SD_UNREGISTER_SERVICE {
	local serviceID="$1"
	
	SD_DEBUG_INFO  "In SD_UNREGISTER_SERVICE serviceID=$serviceID"
	rm -f "$_SD_SERVICE_ARCHIVE/$(basename "$serviceID")" 
}



